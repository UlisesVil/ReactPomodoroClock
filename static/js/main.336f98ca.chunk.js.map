{"version":3,"sources":["modules/pomodoroClock.js","serviceWorker.js","index.js"],"names":["TimerLengthControl","className","id","this","props","titleID","title","minID","value","onClick","lengthID","length","addID","React","Component","Timer","state","brkLength","seshLength","timerState","timerType","timer","intervalID","alarmColor","color","setBrkLength","bind","setSeshLength","lengthControl","timerControl","beginCountDown","decrementTimer","phaseControl","warning","buzzer","switchTimer","clockify","reset","e","currentTarget","stateToChange","sign","currentLength","setState","clear","accurateInterval","_timer","audioBeep","play","num","str","minutes","Math","floor","seconds","pause","currentTime","style","preload","src","ref","audio","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.336f98ca.chunk.js","sourcesContent":["import React from 'react';\r\n//import '../modules/accurateInterval/index.js';\r\nimport accurateInterval from 'accurate-interval';\r\n\r\nclass TimerLengthControl extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"length-control\">\r\n                <div id={this.props.titleID}>\r\n                    {this.props.title}\r\n                </div>\r\n                <button id={this.props.minID}\r\n                        className=\"btn-level\"\r\n                        value=\"-\"\r\n                        onClick={this.props.onClick}>\r\n                    <i className=\"fa fa-arrow-down fa-2x\" />                        \r\n                </button>\r\n                <div id={this.props.lengthID}\r\n                     className=\"btn-level\">\r\n                         {this.props.length}\r\n                </div>\r\n                <button id={this.props.addID}\r\n                        className=\"btn-level\"\r\n                        value=\"+\"\r\n                        onClick={this.props.onClick}>\r\n                    <i className=\"fa fa-arrow-up fa-2x\" />\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\n\r\nclass Timer extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            brkLength: 5,\r\n            seshLength: 25,\r\n            timerState:'stopped',\r\n            timerType: 'Session',\r\n            timer: 1500,\r\n            intervalID: '',\r\n            alarmColor: {color:'white'}  \r\n        }\r\n\r\n        this.setBrkLength = this.setBrkLength.bind(this);\r\n        this.setSeshLength = this.setSeshLength.bind(this);\r\n        this.lengthControl = this.lengthControl.bind(this);\r\n        this.timerControl = this.timerControl.bind(this);\r\n        this.beginCountDown = this.beginCountDown.bind(this);\r\n        this.decrementTimer = this.decrementTimer.bind(this);\r\n        this.phaseControl = this.phaseControl.bind(this);\r\n        this.warning = this.warning.bind(this);\r\n        this.buzzer = this.buzzer.bind(this);\r\n        this.switchTimer = this.switchTimer.bind(this);\r\n        this.clockify = this.clockify.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n    }\r\n\r\n    setBrkLength(e) {\r\n        this.lengthControl('brkLength', e.currentTarget.value,\r\n            this.state.brkLength, 'Session');\r\n    }\r\n\r\n    setSeshLength(e) {\r\n        this.lengthControl('seshLength',\r\n        e.currentTarget.value,\r\n        this.state.seshLength, 'Break');\r\n    }\r\n\r\n    lengthControl (stateToChange,\r\n        sign, currentLength, timerType){\r\n            if (this.state.timerState === 'runing') return;\r\n                if(this.state.timerType === timerType){\r\n                    if(sign === \"-\" && currentLength !== 1){\r\n                        this.setState({[stateToChange]: currentLength -1});\r\n                    }else if (sign === \"+\" && currentLength !== 60){\r\n                        this.setState({[stateToChange]: currentLength + 1});\r\n                    }\r\n                }else{\r\n                    if ( sign === \"-\" && currentLength !== 1) {\r\n                        this.setState({[stateToChange]: currentLength -1, \r\n                        timer: currentLength * 60 - 60});\r\n                    }else if(sign === \"+\" && currentLength !== 60){\r\n                        this.setState({[stateToChange]: currentLength + 1,\r\n                        timer: currentLength * 60 + 60});\r\n                    }\r\n                }\r\n    }\r\n\r\n\r\n    timerControl() {\r\n        let control = this.state.timerState === 'stopped' ? (\r\n            this.beginCountDown(),\r\n            this.setState({timerState:'runing'})\r\n        ) : (\r\n            this.setState({timerState: 'stopped'}),\r\n            this.state.intervalID &&\r\n            this.state.intervalID.clear()\r\n        );\r\n    \r\n    }\r\n\r\n\r\n    beginCountDown() {\r\n        this.setState({\r\n            intervalID: accurateInterval(()=> {\r\n                this.decrementTimer();\r\n                this.phaseControl();\r\n            }, 1000)\r\n        })\r\n    }\r\n\r\n    decrementTimer() {\r\n        this.setState({\r\n            timer:this.state.timer -1\r\n        });\r\n    }\r\n\r\n    phaseControl() {\r\n    let timer = this.state.timer;\r\n    this.warning(timer);\r\n    this.buzzer(timer);\r\n    if (timer < 0) { \r\n        \r\n        \r\n        this.state.timerType = \"Session\" ? \r\n      ( this.state.intervalID && this.state.intervalID.clear(),\r\n        this.beginCountDown(),\r\n        this.switchTimer(this.state.brkLength * 60, 'Break')\r\n      ) : (\r\n        this.state.intervalID && this.state.intervalID.clear(),\r\n        this.beginCountDown(),\r\n        this.switchTimer(this.state.seshLength * 60, 'Session')\r\n       );\r\n    }\r\n  }\r\n\r\n\r\n    warning(_timer) {\r\n        let warn=_timer < 61 ?\r\n        this.setState({\r\n            alarmColor:{color: '#a50d0d'}\r\n        }) :\r\n        this.setState({\r\n            alarmColor:{color: 'white'}\r\n        });\r\n        //return warn;\r\n    }\r\n\r\n    buzzer (_timer) {\r\n        if (_timer === 0) {\r\n            this.audioBeep.play();\r\n        }\r\n    }\r\n\r\n    switchTimer(num, str) {\r\n        this.setState({\r\n            timer: num,\r\n            timerType: str,\r\n            alarmColor: {color: 'white'}\r\n        })\r\n    }\r\n\r\n    clockify() {\r\n        let minutes = Math.floor(this.state.timer / 60);\r\n        let seconds = this.state.timer - minutes * 60;\r\n        seconds = seconds < 10 ? '0' + seconds : seconds;\r\n        minutes = minutes < 10 ? '0' + minutes : minutes;\r\n        return minutes + ':' + seconds;\r\n    }\r\n\r\n    reset(){\r\n        this.setState({\r\n            brkLength: 5,\r\n            seshLength: 25,\r\n            timerState: 'stopped',\r\n            timerType: 'Session',\r\n            timer: 1500,\r\n            intervalID: '',\r\n            alarmColor: {color: 'white'}\r\n        });\r\n        this.state.intervalID && this.state.intervalID.clear();\r\n        this.audioBeep.pause();\r\n        this.audioBeep.currentTime = 0;\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div className = \"main-title\">\r\n                    Pomodoro Clock\r\n                </div>\r\n\r\n                <TimerLengthControl\r\n                    titleID= \"break-label\"\r\n                    minID = \"break-decrement\"\r\n                    addID = \"break-increment\"\r\n                    lengthID = \"break-length\"\r\n                    title = \"Break Length\"\r\n                    onClick = {this.setBrkLength}\r\n                    length = {this.state.brkLength}\r\n                />\r\n\r\n                <TimerLengthControl \r\n                    titleID = \"session-label\"\r\n                    minID = \"session-decrement\"\r\n                    addID = \"session-increment\"\r\n                    lengthID = \"session-length\"\r\n                    title = \"Session Length\"\r\n                    onClick = {this.setSeshLength}\r\n                    length = {this.state.seshLength}\r\n                />\r\n\r\n                <div className = \"timer\"\r\n                     style = {this.state.alarmColor}>\r\n                    <div className = \"timer-wrapper\">\r\n                        <div id=\"timer-label\">\r\n                            {this.state.timerType}\r\n                        </div>\r\n                        <div id='time-left'>\r\n                            {this.clockify()}\r\n                        </div>\r\n                    </div>    \r\n                </div>\r\n                <div className= \"timer-control\">\r\n                    <button id= \"start_stop\"\r\n                            onClick={this.timerControl}>\r\n                            <i className = \"fa fa-play fa-2x\"/>\r\n                            <i className = \"fa fa-pause fa-2x\"/>    \r\n                    </button>\r\n                    <button id = \"reset\"\r\n                            onClick = {this.reset}>\r\n                        <i className = \"fa fa-refresh fa-2x\"/>\r\n                    </button>\r\n                </div>\r\n                <audio id = \"beep\"\r\n                        preload = \"auto\"\r\n                        src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\r\n                        ref={(audio)=>{\r\n                            this.audioBeep = audio;\r\n                        }}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default Timer;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.css';\n//import App from './App';\nimport Timer from './modules/pomodoroClock';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    {/*<App />*/}\n    <Timer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}